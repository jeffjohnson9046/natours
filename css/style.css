/*
COLORS:

Light green: #7ed56f
Medium green: #55c57a
Dark green: #28b485

*/

/* Reset using "universal selector" */
* {
    margin: 0;
    padding: 0;
    box-sizing: border-box; /* padding and borders are not added to the width/height of the element */
}

body {
    font-family: "Lato", sans-serif;
    font-weight: 400;
    font-size: 16px;
    line-height: 1.7;
    color: #777;
    padding: 30px;
}

/* note there are TWO background-image properties here:
      1. the linear gradient
      2. the 'hero' image to display
      
      The two properties are separated by a comma
*/
.header {
    position: relative;
    height: 95vh; /* should be 95% of the viewport height */
    background-image: linear-gradient(
        to right bottom, 
        rgba(126, 213, 111, 0.8), 
        rgba(40, 180, 133, 0.8)), 
    url(../img/hero.jpg);
    background-size: cover; /* always try to fit image inside of the box */
    background-position: top; /* element stays at the top of the container as viewport changes */

    /* 
    x,y coordinate pairs can be specified using any of the measurement units (e.g. px, vh, rem, etc.)
    any number of x, y coordinate pairs can be used to create any polygon
    */
    clip-path: polygon(0 0, 100% 0, 100% 75vh, 0 100%); 
}

.logo-box {
    position: absolute;
    top: 40px;
    left: 40px;
}

.logo {
    height: 35px; /* width will automatically be scaled (or figured out) by the browser */
}

/* This "centers" the element within its parent container.  "Centers" is in quotes here because the top/left properties can
be set to any value; the "centering magic" happens in the transform: translate() attribute.  The translate function allows
us to start measuring from the center of the element (or where-ever we want, really - depending on the arguments we pass in
to the translate function).

  position: absolute sets up the absolute positioning so we can use top, left, bottom, rigtht to position this element
    NOTE:  the parent container (or some ancestor) must have position; relativ for this element to measure itself against
  top: how far the top of this element should be from the top of its container
  left:  how far left this element should be from the left side of its container
  transform:  the translate function says "remove half of my X width and half of my Y height"
*/
.header-text-box {
    position: absolute;
    top: 40%;
    left: 50%;
    transform: translate(-50%, -50%); /* in relation to the element itself. */
    text-align: center; /* we can use text-align center to center all the block & inline-block elements (which are just treated as text) */
}

.heading-primary {
    color: #fff;
    text-transform: uppercase;

    /* this prevents the animation from being "shaky".  If you take this out, the 'header' will appear to move up by
    1 pixel or so.

    This determines if the 'back part' of the element should be visible (e.g. if you "flip" an element over like a card).
     */
    backface-visibility: hidden;
    margin-bottom: 60px;
}

.heading-primary-main {
    display: block;
    font-size: 60px;
    font-weight: 400;
    letter-spacing: 35px;

    animation-name: moveInLeft;
    animation-duration: 700ms;
    animation-timing-function: ease-out;

    /* determine the number of times the animation executes: 
    animation-iteration-count: 3;
    */
    
    /* specify the time before the animation starts:
    animation-delay: 3s;
    */
}

.heading-primary-sub {
    display: block;
    font-size: 20px;
    font-weight: 700;
    letter-spacing: 17.4px;

    /* shorthand for various animation properties */
    animation: moveInRight 1s ease-out;
}

/* When animating, browsers are optimized for two properties::after
 * opacity
 * transform

these animations can also be applied to pseudo-classes or pseudo-selectors (e.g. :hover, :focus, etc)
*/
@keyframes moveInLeft {
    /* before the animation starts */
    0% {
        opacity: 0;
        transform: translateX(-100px); /* x is left-to-right, positive goes left, negative goes right*/
    }

    /* add a bit of "bounce" to the animation before the animation completes*/ 
    80%  {
        transform: translateX(10px);
    }

    /* After animation completes */
    100% {
        opacity: 1;
        transform: translate(0);
    }
}

@keyframes moveInRight {
    /* before the animation starts */
    0% {
        opacity: 0;
        transform: translateX(100px); /* x is left-to-right, positive goes left, negative goes right*/
    }

    /* add a bit of "bounce" to the animation before the animation completes*/ 
    80%  {
        transform: translateX(-10px);
    }

    /* After animation completes */
    100% {
        opacity: 1;
        transform: translate(0);
    }
}

@keyframes moveInBtn {
    0% {
        opacity: 0;
        transform: translateY(40px);
    }

    100% {
        opacity: 1;
        transform: translate(0);
    }
}

.btn:link,
.btn:visited {
    text-transform: uppercase;
    text-decoration: none;
    padding: 15px 40px;
    display: inline-block;
    border-radius: 100px;

    /* "all" is shorthand for "animate all properties"
    NOTE:  "transition" needs to be on the initial state of the thingy that's going to be animated
     */
    transition: all 0.2s;
    position: relative;
}

.btn:hover {
    transform: translateY(-3px);
    box-shadow: 0 10px 20px rgba(0, 0, 0, 0.2);
}

/* "active" is when the button is clicked */
.btn:active {
    transform: translateY(-1px);
    box-shadow: 0 5px 10px rgba(0, 0, 0, 0.2);
}

.btn-white {
    background-color: #fff;
    color: #777;
}

/* the "after" pseudo-element is treated like a child of the element that has the .btn class. */
.btn::after {
    /* content property is always necessary otherwise the after effect doesn't appear  */
    content: "";
    display: inlie-block;
    height: 100%;
    width: 100%;
    border-radius: 100px;
    position: absolute;
    top: 0;
    left: 0;
    z-index: -1;
    transition: all 0.4s;
}

.btn-white::after {
    background-color: #fff;
}

.btn:hover::after {
    transform: scaleX(1.4) scaleY(1.6);
    opacity: 0;
}

.btn-animated {
    animation: moveInBtn 0.5s ease-out 0.75s;

    /* this property applies the CSS properties of the "0%" animation.  In this case, the button will not be
    visible until the animation delay elapses and the animation starts.
    */
    animation-fill-mode: backwards;
}